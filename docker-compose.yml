version: '3.8'

services:
  zookeeper:
    image: 'bitnami/zookeeper:3.8.0'
    container_name: 'zookeeper_ambev'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  kafka:
    image: 'bitnami/kafka:3.3.2'
    container_name: 'kafka_ambev'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - app-network
    depends_on:
      - zookeeper

  mysql:
    container_name: mysql_ambev
    image: mysql:8.4.2
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: secret
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-psecret"]
      interval: 10s
      retries: 10
      start_period: 40s
      timeout: 5s
    command: >
      bash -c "docker-entrypoint.sh mysqld & sleep 5 && mysql -u root -p$${MYSQL_ROOT_PASSWORD} -e 'CREATE DATABASE IF NOT EXISTS order_db; CREATE DATABASE IF NOT EXISTS product_db;' && wait"

  order_service:
    container_name: order_service
    hostname: order-service
    build: order-service/.
    command: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_ORDER_TOPIC: order-topic
      KAFKA_ORDER_GROUP: order-group
      KAFKA_PRODUCT_TOPIC: product-topic
      KAFKA_PRODUCT_GROUP: product-group
    volumes:
      - ../:/order_service
    networks:
      - app-network
    depends_on:
      - mysql
      - zookeeper
      - kafka
      - product_service

  product_service:
    container_name: product_service
    hostname: product-service
    build: product-service/.
    command: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/product_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    volumes:
      - ../:/product_service
    networks:
      - app-network
    depends_on:
      - mysql
      - zookeeper
      - kafka

volumes:
  mysql-data:

networks:
  app-network:
    driver: bridge
